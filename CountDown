import javafx.animation.KeyFrame;
import javafx.animation.Timeline;
import javafx.beans.property.SimpleStringProperty;
import javafx.beans.property.StringProperty;
import javafx.util.Duration;
import javafx.scene.control.Alert;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.control.Button;
import javafx.scene.layout.Region;
import javafx.scene.control.ButtonType;
import javafx.animation.PauseTransition;


public class FxStopWatch extends Button {


    private Timeline timeline;

    private final StringProperty timeMiliseconds = new SimpleStringProperty();

    private Duration zeroTime = Duration.seconds(0);


    private boolean active;

    public FxStopWatch(double availableTime) {
        Duration time = Duration.seconds(availableTime);
        this.textProperty().bind(timeMiliseconds);
        start(availableTime);
    }

    public void start(double availableTime) {

        final Duration[] time = {Duration.seconds(availableTime)};

        if (active) {
            timeMiliseconds.set(makeText(time[0]));
            stop();
            return;
        }

        active = true;

        if (timeline == null) {
            timeline = new Timeline(
                    new KeyFrame(Duration.millis(10), // duration object sets the update interval
                            e -> {
                                if (time[0].equals(zeroTime)) {
                                    stop();
                                    timeline.stop();
                                }
                                final Duration duration = ((KeyFrame) e.getSource()).getTime();
                                time[0] = time[0].subtract(duration);
                                timeMiliseconds.set(makeText(time[0]));
                            }
                    )
            );

        }
        timeline.setCycleCount(Timeline.INDEFINITE);

        timeline.play();
    }

    private String makeText(final Duration duration) {
        return String.format("%02d:%02d:%02d",
                (long) (duration.toMinutes() % 60.0),
                (long) (duration.toSeconds() % 60.0),
                (long) (duration.toMillis() % 1000.0)
        );

    }

    public void stop() {

        Alert alert = new Alert(AlertType.INFORMATION, "GAME OVER. YOU RAN OUT OF TIME", ButtonType.OK);
        alert.getDialogPane().setMinHeight(Region.USE_PREF_SIZE);
        alert.show();

        PauseTransition wait = new PauseTransition(Duration.seconds(3));     // Just thought it would be a cool idea to test.
                                                                            //Could very well reenter into menu after THREE Seconds ??
        wait.setOnFinished((e) -> {
            System.exit(0);
        });
        wait.play();
    }

    public boolean isActive() {
        return active;
    }

}

import java.io.*;
import java.util.*; 
import java.util.Arrays;

		class ColEdge
			{
			int u;
			int v;
			}
			
			 class customArray{
                int breakIndex;
    int number;
   

    public customArray(int breakpoint,int n){
        breakIndex = breakpoint;
        number = n;
    }
    @Override
    public String toString(){
    	return breakIndex +"," + number;
    }
}
		
public class ReadGraph
		{
		
		public final static boolean DEBUG = true;
		
		public final static String COMMENT = "//";
		
		public static void main( String args[] )
			{
			if( args.length < 1 )
				{
				System.out.println("Error! No filename specified.");
				System.exit(0);
				}

				
			String inputfile = args[0];
			
			boolean seen[] = null;
			
			//! n is the number of vertices in the graph
			int n = -1;
			
			//! m is the number of edges in the graph
			int m = -1;
			
			//! e will contain the edges of the graph
			ColEdge e[] = null;
			
			try 	{ 
			    	FileReader fr = new FileReader(inputfile);
			        BufferedReader br = new BufferedReader(fr);

			        String record = new String();
					
					//! THe first few lines of the file are allowed to be comments, staring with a // symbol.
					//! These comments are only allowed at the top of the file.
					
					//! -----------------------------------------
			        while ((record = br.readLine()) != null)
						{
						if( record.startsWith("//") ) continue;
						break; // Saw a line that did not start with a comment -- time to start reading the data in!
						}
	
					if( record.startsWith("VERTICES = ") )
						{
						n = Integer.parseInt( record.substring(11) );					
						if(DEBUG) System.out.println(COMMENT + " Number of vertices = "+n);
						}

					seen = new boolean[n+1];	
						
					record = br.readLine();
					
					if( record.startsWith("EDGES = ") )
						{
						m = Integer.parseInt( record.substring(8) );					
						if(DEBUG) System.out.println(COMMENT + " Expected number of edges = "+m);
						}

					e = new ColEdge[m];	
												
					for( int d=0; d<m; d++)
						{
						if(DEBUG) System.out.println(COMMENT + " Reading edge "+(d+1));
						record = br.readLine();
						String data[] = record.split(" ");
						if( data.length != 2 )
								{
								System.out.println("Error! Malformed edge line: "+record);
								System.exit(0);
								}
						e[d] = new ColEdge();
						
						e[d].u = Integer.parseInt(data[0]);
						e[d].v = Integer.parseInt(data[1]);

						seen[ e[d].u ] = true;
						seen[ e[d].v ] = true;
						
						if(DEBUG) System.out.println(COMMENT + " Edge: "+ e[d].u +" "+e[d].v);
				
						}
									
					String surplus = br.readLine();
					if( surplus != null )
						{
						if( surplus.length() >= 2 ) if(DEBUG) System.out.println(COMMENT + " Warning: there appeared to be data in your file after the last edge: '"+surplus+"'");						
						}
					
					}
			catch (IOException ex)
				{ 
		        // catch possible io errors from readLine()
			    System.out.println("Error! Problem reading file "+inputfile);
				System.exit(0);
				}

			for( int x=1; x<=n; x++ )
				{
				if( seen[x] == false )
					{
					if(DEBUG) System.out.println(COMMENT + " Warning: vertex "+x+" didn't appear in any edge : it will be considered a disconnected vertex on its own.");
					}
				}
					
					/*
				}
				int counter = 0;
				List<Integer> breakPoints = new ArrayList<Integer>();
				for (int i=0; i <e.length;i++){
					if ( e[0].u == e[i].u){
						counter++;
					}else{
						breakPoints.add(counter);
						counter = 0;
						break;
					}
				}
				*/
				int vertices = n;
				
				int[][] matrix = new int[n+1][n+1];
				for (int i = 0;i<e.length ;i++){
					
					int firstNumber =e[i].u;
					int secondNumber = e[i].v;
					
					matrix[firstNumber][secondNumber] = 1;
					matrix[secondNumber][firstNumber] = 1;
				}
				int upperBound = upperBound(matrix);
				System.out.println(upperBound);
				int[] color;
				color = makeColorsArray(upperBound);
				//doneArray holds all the lowest numbers each vertix
				int[] doneArray = new int[n]; 
                for (int j = 0;j <n; j++){
	                     if (j == 0 || j == 1){
		              doneArray[j] = 1;
	                       }
	              doneArray[j] = coloring(color,matrix,doneArray,j);
}
                        int finalReturn=0;
                        for(int k=0;k<doneArray.length;k++){
                        	if(doneArray[k]>finalReturn){
                        		finalReturn=doneArray[k];
                        	}
                        }
                        System.out.println(finalReturn);
				
				
				
				
				
					
		}
		
		private static int upperBound(int[][] matrix) {
	int max = 0;
	int upperBound = 0;
	
	for(int i = 0; i < matrix[0].length; i++) {
		for(int j = 0; j < matrix.length; j++) {
			if(matrix[i][j] == 1) {
				upperBound++;
			}
		}
		if(max < upperBound)
			max = upperBound;
			upperBound = 0;
	}
	return max + 1;
}

private static int[] makeColorsArray(int upperBound){
	int[] colors = new int[upperBound];
	for (int i = 0; i<colors.length;i++){
		colors[i]=i+1;
	}
	return colors;
}

private static int coloring(int[] colors,int[][] matrix,int[] done,int index){
	int[] array = Arrays.copyOf(colors,colors.length);
	for (int j = index-1;j>0;j--){
           if( matrix[index][j] == 1){
           	   int colorToRemove = done[j];
           	   for(int i=0; i<array.length; i++){
           	   	   if(array[i]==colorToRemove){
           	   	   	   array[i]=0;
           	   	   }
           }
           }
           }
           boolean stop=false;
           int lowestColor=0;
           for(int i=0;i<array.length&&stop!=true;i++){
           	   if(array[i]!=0){
           	   lowestColor=array[i];
           	   stop=true;
           }
           }
           return lowestColor;
           }

}
